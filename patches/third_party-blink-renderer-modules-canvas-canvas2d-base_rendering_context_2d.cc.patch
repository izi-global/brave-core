diff --git a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
index 357d8c5a187c67901741e3dd5b4187d9e2be0f33..1aaf1333a9c4213ba9d940d80812427cd0d24212 100644
--- a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
+++ b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
@@ -4,11 +4,13 @@
 
 #include "third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.h"
 
+#include "brave/renderer/brave_content_settings_observer_helper.h"
 #include "third_party/blink/renderer/bindings/core/v8/exception_messages.h"
 #include "third_party/blink/renderer/bindings/core/v8/exception_state.h"
 #include "third_party/blink/renderer/core/css/cssom/css_url_image_value.h"
 #include "third_party/blink/renderer/core/css/parser/css_parser.h"
 #include "third_party/blink/renderer/core/execution_context/execution_context.h"
+#include "third_party/blink/renderer/core/frame/local_dom_window.h"
 #include "third_party/blink/renderer/core/html/canvas/html_canvas_element.h"
 #include "third_party/blink/renderer/core/html/canvas/image_data.h"
 #include "third_party/blink/renderer/core/html/canvas/text_metrics.h"
@@ -350,7 +352,12 @@ void BaseRenderingContext2D::setShadowColor(const String& color_string) {
   ModifiableState().SetShadowColor(color.Rgb());
 }
 
-const Vector<double>& BaseRenderingContext2D::getLineDash() const {
+const Vector<double>& BaseRenderingContext2D::getLineDash(ScriptState* script_state) const {
+  static const Vector<double> emptyVector;
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return emptyVector;
+  }
   return GetState().LineDash();
 }
 
@@ -789,16 +796,26 @@ void BaseRenderingContext2D::clip(Path2D* dom_path,
   ClipInternal(dom_path->GetPath(), winding_rule_string);
 }
 
-bool BaseRenderingContext2D::isPointInPath(const double x,
+bool BaseRenderingContext2D::isPointInPath(ScriptState* script_state,
+                                           const double x,
                                            const double y,
                                            const String& winding_rule_string) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInPathInternal(path_, x, y, winding_rule_string);
 }
 
-bool BaseRenderingContext2D::isPointInPath(Path2D* dom_path,
+bool BaseRenderingContext2D::isPointInPath(ScriptState* script_state,
+                                           Path2D* dom_path,
                                            const double x,
                                            const double y,
                                            const String& winding_rule_string) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInPathInternal(dom_path->GetPath(), x, y, winding_rule_string);
 }
 
@@ -823,13 +840,23 @@ bool BaseRenderingContext2D::IsPointInPathInternal(
                        SkFillTypeToWindRule(ParseWinding(winding_rule_string)));
 }
 
-bool BaseRenderingContext2D::isPointInStroke(const double x, const double y) {
+bool BaseRenderingContext2D::isPointInStroke(ScriptState* script_state, const double x, const double y) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInStrokeInternal(path_, x, y);
 }
 
-bool BaseRenderingContext2D::isPointInStroke(Path2D* dom_path,
-                                             const double x,
-                                             const double y) {
+
+bool BaseRenderingContext2D::isPointInStroke(ScriptState* script_state,
+                                             Path2D* dom_path,
+                                              const double x,
+                                              const double y) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) {
+    return false;
+  }
   return IsPointInStrokeInternal(dom_path->GetPath(), x, y);
 }
 
@@ -1605,11 +1632,14 @@ ImageData* BaseRenderingContext2D::createImageData(
 }
 
 ImageData* BaseRenderingContext2D::getImageData(
+    ScriptState* script_state,
     int sx,
     int sy,
     int sw,
     int sh,
     ExceptionState& exception_state) {
+  LocalDOMWindow* window = LocalDOMWindow::From(script_state);
+  if (window && !AllowFingerprinting(window->GetFrame())) return nullptr;
   if (!WTF::CheckMul(sw, sh).IsValid<int>()) {
     exception_state.ThrowRangeError("Out of memory at ImageData creation");
     return nullptr;
